#!/bin/bash

# ๐ ุณูุฑูุจุช ูุดุฑ Book Store ููุฅูุชุงุฌ
# ุงุณุชุฎุฏู: ./deploy-production.sh

set -e

echo "๐ ุจุฏุก ุงููุดุฑ ูู ุจูุฆุฉ ุงูุฅูุชุงุฌ..."

# ุงูุชุญูู ูู ูุฌูุฏ Docker
if ! command -v docker &> /dev/null; then
    echo "โ Docker ุบูุฑ ูุซุจุช. ูุฑุฌู ุชุซุจูุช Docker ุฃููุงู."
    exit 1
fi

# ุงูุชุญูู ูู ูุฌูุฏ Docker Compose
if ! command -v docker-compose &> /dev/null; then
    echo "โ Docker Compose ุบูุฑ ูุซุจุช. ูุฑุฌู ุชุซุจูุช Docker Compose ุฃููุงู."
    exit 1
fi

# ุงูุชุญูู ูู ูุฌูุฏ ููู production.env
if [ ! -f "production.env" ]; then
    echo "โ ููู production.env ุบูุฑ ููุฌูุฏ. ูุฑุฌู ุฅูุดุงุคู ุฃููุงู."
    exit 1
fi

# ุงูุชุญูู ูู ุงููุชุบูุฑุงุช ุงููุทููุจุฉ
echo "๐ ุงูุชุญูู ูู ุงููุชุบูุฑุงุช ุงูุจูุฆูุฉ..."
source production.env

required_vars=(
    "JWT_SECRET"
    "STRIPE_SECRET_KEY"
    "STRIPE_PUBLISHABLE_KEY"
    "STRIPE_WEBHOOK_SECRET"
    "SESSION_SECRET"
)

for var in "${required_vars[@]}"; do
    if [ -z "${!var}" ] || [[ "${!var}" == *"your_"* ]]; then
        echo "โ ุงููุชุบูุฑ $var ุบูุฑ ูุญุฏุฏ ุฃู ูุญุชูู ุนูู ูููุฉ ุงูุชุฑุงุถูุฉ."
        echo "ูุฑุฌู ุชุญุฏูุซ ููู production.env"
        exit 1
    fi
done

echo "โ ุฌููุน ุงููุชุบูุฑุงุช ุงููุทููุจุฉ ูุญุฏุฏุฉ."

# ุฅููุงู ุงูุฎุฏูุงุช ุงูุญุงููุฉ
echo "๐ ุฅููุงู ุงูุฎุฏูุงุช ุงูุญุงููุฉ..."
docker-compose -f docker-compose.prod.yml down

# ุชูุธูู ุงูุตูุฑ ุงููุฏููุฉ
echo "๐งน ุชูุธูู ุงูุตูุฑ ุงููุฏููุฉ..."
docker system prune -f

# ุจูุงุก ุงูุตูุฑ ุงูุฌุฏูุฏุฉ
echo "๐จ ุจูุงุก ุงูุตูุฑ ุงูุฌุฏูุฏุฉ..."
docker-compose -f docker-compose.prod.yml build --no-cache

# ุชุดุบูู ุงูุฎุฏูุงุช
echo "โถ๏ธ ุชุดุบูู ุงูุฎุฏูุงุช..."
docker-compose -f docker-compose.prod.yml up -d

# ุงูุชุธุงุฑ ุจุฏุก ุงูุฎุฏูุงุช
echo "โณ ุงูุชุธุงุฑ ุจุฏุก ุงูุฎุฏูุงุช..."
sleep 30

# ุงูุชุญูู ูู ุญุงูุฉ ุงูุฎุฏูุงุช
echo "๐ ุงูุชุญูู ูู ุญุงูุฉ ุงูุฎุฏูุงุช..."
docker-compose -f docker-compose.prod.yml ps

# ุงูุชุญูู ูู ุตุญุฉ ุงูุชุทุจูู
echo "๐ฅ ุงูุชุญูู ูู ุตุญุฉ ุงูุชุทุจูู..."
max_attempts=10
attempt=1

while [ $attempt -le $max_attempts ]; do
    echo "ูุญุงููุฉ $attempt ูู $max_attempts..."
    
    if curl -f http://localhost/health > /dev/null 2>&1; then
        echo "โ ุงูุชุทุจูู ูุนูู ุจูุฌุงุญ!"
        break
    else
        if [ $attempt -eq $max_attempts ]; then
            echo "โ ุงูุชุทุจูู ูุง ูุณุชุฌูุจ ุจุนุฏ $max_attempts ูุญุงููุงุช."
            echo "ุชุญูู ูู ุงูุณุฌูุงุช:"
            docker-compose -f docker-compose.prod.yml logs app
            exit 1
        fi
        echo "โณ ุงูุชุธุงุฑ 10 ุซูุงูู..."
        sleep 10
        attempt=$((attempt + 1))
    fi
done

# ุงูุชุญูู ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช
echo "๐๏ธ ุงูุชุญูู ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช..."
if docker-compose -f docker-compose.prod.yml exec mongo mongosh --eval "db.adminCommand('ping')" > /dev/null 2>&1; then
    echo "โ ูุงุนุฏุฉ ุงูุจูุงูุงุช ุชุนูู ุจูุฌุงุญ!"
else
    echo "โ ูุดููุฉ ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช."
    docker-compose -f docker-compose.prod.yml logs mongo
fi

# ุนุฑุถ ูุนูููุงุช ุงููุดุฑ
echo ""
echo "๐ ุงููุดุฑ ููุชูู ุจูุฌุงุญ!"
echo "๐ ููููู ุงููุตูู ููุชุทุจูู ุนูู: http://localhost"
echo "๐ ุญุงูุฉ ุงูุฎุฏูุงุช:"
docker-compose -f docker-compose.prod.yml ps

echo ""
echo "๐ ุฃูุงูุฑ ูููุฏุฉ:"
echo "  ุนุฑุถ ุงูุณุฌูุงุช: docker-compose -f docker-compose.prod.yml logs -f"
echo "  ุฅููุงู ุงูุฎุฏูุงุช: docker-compose -f docker-compose.prod.yml down"
echo "  ุฅุนุงุฏุฉ ุชุดุบูู: docker-compose -f docker-compose.prod.yml restart"
echo "  ุนุฑุถ ุงูุงุณุชุฎุฏุงู: docker system df"
